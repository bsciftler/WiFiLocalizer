---
swagger: "2.0"
info:
  description: "Synchronize local app data to the FIU cloud server"
  version: "1.0.0"
  title: "WiFi Localizer API"
  contact:
    name: "Oliver Chang"
    url: "https://fiu.edu"
    email: "o.chang@umiami.edu"
host: "192.168.1.123:8080"
basePath: "/v1"
schemes:
- "http"
produces:
- "application/json"
paths:
  /access_points:
    get:
      tags:
      - "AccessPoint"
      summary: "Get a listing of all available access points for a map"
      operationId: "controllers.default_controller.access_points_get"
      parameters:
      - name: "map_id"
        in: "query"
        description: "Valid Map ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "All access points"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessPoint"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "AccessPoint"
  /bitmap:
    get:
      tags:
      - "WifiBitmap"
      summary: "Get a base64 encoded string of a map's bitmap image"
      operationId: "controllers.default_controller.bitmap_get"
      parameters:
      - name: "id"
        in: "query"
        description: "Valid Map ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "Bitmap for ID"
          schema:
            $ref: "#/definitions/WifiBitmap"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "WifiBitmap"
    post:
      tags:
      - "WifiBitmap"
      summary: "Add a new bitmap for an image. There can only be at max one bitmap per image."
      operationId: "controllers.default_controller.bitmap_post"
      parameters:
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/WifiBitmap"
      responses:
        200:
          description: "True if successful Bitmap insert"
          schema:
            type: boolean
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "WifiBitmap"
  /maps:
    get:
      tags:
      - "WifiMap"
      summary: "Get a map by ID or exact name"
      operationId: "controllers.default_controller.maps_get"
      parameters:
      - name: "id"
        in: "query"
        description: "Cloud Map ID"
        required: false
        type: "integer"
      - name: "name"
        in: "query"
        description: "Exact name of Map"
        required: false
        type: "string"
      responses:
        200:
          description: "Maps matching the query"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiMap"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "WifiMap"
    post:
      tags:
      - "WifiMap"
      summary: "Add a new map name"
      operationId: "controllers.default_controller.maps_post"
      parameters:
      - name: "map_name"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Newly inserted map"
          schema:
            $ref: "#/definitions/WifiMap"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "WifiMap"
  /maps/_all:
    get:
      tags:
      - "WifiMap"
      summary: "Get all of the maps the cloud server knows about"
      operationId: "controllers.default_controller.maps_all_get"
      parameters: []
      responses:
        200:
          description: "List of all available maps"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiMap"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "WifiMap"
  /maps/search:
    get:
      tags:
      - "WifiMap"
      summary: "Search for a map given an idea of its name"
      operationId: "controllers.default_controller.maps_search_get"
      parameters:
      - name: "keywords"
        in: "query"
        description: "case-insensitive keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "List of maps fitting the keywords. Will try to return something, even if very inaccurate match. Results will be in sorted order, best match descending, i.e. best match first.\n"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WifiMap"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "WifiMap"
  /probes:
    get:
      tags:
      - "ProbeRequest"
      summary: "Get a list of probe requests for a map ID"
      operationId: "controllers.default_controller.probes_get"
      parameters:
      - name: "map_id"
        in: "query"
        description: "Map ID"
        required: true
        type: "integer"
      - name: "data_since"
        in: "query"
        description: "ISO-formatted date string to get probes sent to cloud after date"
        required: false
        type: "string"
        format: "dateTime"
      responses:
        200:
          description: "List of probe requests"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProbeRequest"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "ProbeRequest"
    post:
      tags:
      - "ProbeRequest"
      summary: "Insert probe requests"
      operationId: "controllers.default_controller.probes_post"
      parameters:
      - in: "body"
        name: "data"
        description: "Probe requests to append"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ProbeRequest"
      responses:
        200:
          description: "Two-tuple of (inserted, failed)"
          schema:
            type: "array"
            items:
              type: "integer"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "ProbeRequest"
  /readings:
    get:
      tags:
      - "Reading"
      summary: "Get a list of readings for a map ID"
      operationId: "controllers.default_controller.readings_get"
      parameters:
      - name: "map_id"
        in: "query"
        description: "Map ID"
        required: true
        type: "integer"
      - name: "data_since"
        in: "query"
        description: "ISO-formatted date string to get readings sent to cloud after date"
        required: false
        type: "string"
        format: "dateTime"
      responses:
        200:
          description: "List of readings"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reading"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "Reading"
    post:
      tags:
      - "Reading"
      summary: "Insert readings"
      operationId: "controllers.default_controller.readings_post"
      parameters:
      - in: "body"
        name: "data"
        description: "Readings to append"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Reading"
      responses:
        200:
          description: "Two-tuple of (inserted, failed)"
          schema:
            type: "array"
            items:
              type: "integer"
        default:
          description: "Unexpected Error"
          schema:
            $ref: "#/definitions/ApiError"
      x-tags:
      - tag: "Reading"
definitions:
  WifiMap:
    type: "object"
    required:
    - map_id
    - name
    properties:
      map_id:
        type: "integer"
        description: "global unique id of a specific map"
      name:
        type: "string"
        description: "human readable name of the map"
  WifiBitmap:
    type: "object"
    required:
    - map_id
    - data
    properties:
      map_id:
        type: "integer"
        description: "global unique id of a specific map"
      data:
        type: "string"
        description: "base64 encoding of an ImageView compatible image e.g. jpg"
  AccessPoint:
    type: "object"
    required:
    - mac_address
    properties:
      mac_address:
        type: "string"
        description: "Media Access Control (MAC) Address of an access point"
  Reading:
    type: "object"
    required:
    - timestamp
    - map_x
    - map_y
    - rssi
    - mac_address
    - map_id
    properties:
      timestamp:
        type: "string"
        format: "dateTime"
        description: "Time of capture"
      map_x:
        type: "number"
        format: "double"
        description: "x-coordinate in pixels on corresponding bitmap"
      map_y:
        type: "number"
        format: "double"
        description: "y-coordinate in pixels on corresponding bitman"
      rssi:
        type: "integer"
        description: "received signal strength intensity of reading"
      mac_address:
        type: "string"
        description: "Media Access Control (MAC) address of reading"
      map_id:
        type: "integer"
        description: "valid global unique id of a specific map"
  ProbeRequest:
    type: "object"
    required:
    - map_x
    - map_y
    - fingerprint
    - rssi
    - map_id
    properties:
      map_x:
        type: "number"
        format: "double"
        description: "x-coordinate in pixels on corresponding bitmap"
      map_y:
        type: "number"
        format: "double"
        description: "y-coordinate in pixels on corresponding bitman"
      fingerprint:
        type: "string"
        description: "device Media Access Control address"
      rssi:
        type: "integer"
        description: "received signal strength intensity of probe request"
      map_id:
        type: "integer"
        description: "valid global unique id of a specific map"
  ApiError:
    type: "object"
    properties:
      message:
        type: "string"
        description: "human readable description of what went wrong"
